"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultConfig = exports.calculateNextPosition = void 0;
const _1 = require(".");
const lib_1 = require("../../lib");
const calculateNextPosition = (existingWidgets, newWidgetDimensions, gridColumns = 4) => {
    if (existingWidgets.length === 0) {
        return { x: 0, y: 0 };
    }
    const { w: newW, h: newH } = newWidgetDimensions;
    // Early return if widget is too wide
    if (newW > gridColumns) {
        return { x: 0, y: 0 };
    }
    // Create a 2D grid to track occupied cells more efficiently
    const grid = new Map();
    let maxY = 0;
    // Build the occupation map
    for (const widget of existingWidgets) {
        const { x, y, w, h } = widget.position;
        const endY = y + h;
        maxY = Math.max(maxY, endY);
        for (let row = y; row < endY; row++) {
            if (!grid.has(row)) {
                grid.set(row, new Set());
            }
            const rowSet = grid.get(row);
            for (let col = x; col < x + w; col++) {
                rowSet.add(col);
            }
        }
    }
    // position checking
    const isPositionAvailable = (x, y) => {
        for (let row = y; row < y + newH; row++) {
            const rowSet = grid.get(row);
            if (rowSet) {
                for (let col = x; col < x + newW; col++) {
                    if (rowSet.has(col))
                        return false;
                }
            }
        }
        return true;
    };
    // Find the first available position, scanning row by row
    const maxX = gridColumns - newW;
    for (let y = 0; y <= maxY + 1; y++) {
        for (let x = 0; x <= maxX; x++) {
            if (isPositionAvailable(x, y)) {
                return { x, y };
            }
        }
    }
    // Fallback: place at bottom-left
    return { x: 0, y: maxY };
};
exports.calculateNextPosition = calculateNextPosition;
const getDefaultConfig = (widgetType, chartType, columns) => {
    switch (widgetType) {
        case _1.WidgetTypes.METRIC:
            return {
                dataSource: _1.WidgetDataSourceTypes.MODEL,
                metric: {
                    type: 'count',
                    aggregation: 'count',
                },
                appearance: {
                    type: 'filled',
                    theme: 'purple',
                },
            };
        case _1.WidgetTypes.CHART:
            return getDefaultChartConfig(chartType, columns);
        default:
            return {};
    }
};
exports.getDefaultConfig = getDefaultConfig;
const getDefaultChartConfig = (chartType, columns) => {
    const baseConfig = {
        dataSource: _1.WidgetDataSourceTypes.MODEL,
    };
    // Helper function to get the best column for category field
    const getDefaultCategoryColumn = (columns) => {
        var _a;
        if (!columns || (columns === null || columns === void 0 ? void 0 : columns.length) === 0)
            return '';
        // Priority 1: SingleSelect
        const singleSelectColumn = columns.find((col) => col.uidt === lib_1.UITypes.SingleSelect);
        if (singleSelectColumn)
            return singleSelectColumn.id;
        // Priority 2: SingleLineText
        const singleLineTextColumn = columns.find((col) => col.uidt === lib_1.UITypes.SingleLineText);
        if (singleLineTextColumn)
            return singleLineTextColumn.id;
        // Fallback: first column
        return ((_a = columns[0]) === null || _a === void 0 ? void 0 : _a.id) || '';
    };
    switch (chartType) {
        case _1.ChartTypes.PIE:
            return Object.assign(Object.assign({}, baseConfig), { chartType: _1.ChartTypes.PIE, data: {
                    category: {
                        column_id: getDefaultCategoryColumn(columns),
                        orderBy: 'default',
                        includeEmptyRecords: false,
                    },
                    value: {
                        type: 'count',
                    },
                }, appearance: {
                    size: 'medium',
                    showCountInLegend: true,
                    showPercentageOnChart: true,
                    legendPosition: 'right',
                    colorSchema: 'default',
                    customColorSchema: [],
                }, permissions: {
                    allowUserToPrint: true,
                    allowUsersToViewRecords: false,
                } });
        case _1.ChartTypes.DONUT:
            return Object.assign(Object.assign({}, baseConfig), { chartType: _1.ChartTypes.DONUT, data: {
                    category: {
                        column_id: getDefaultCategoryColumn(columns),
                        orderBy: 'default',
                        includeEmptyRecords: false,
                    },
                    value: {
                        type: 'count',
                    },
                }, appearance: {
                    size: 'medium',
                    showCountInLegend: true,
                    showPercentageOnChart: true,
                    legendPosition: 'right',
                    colorSchema: 'default',
                    customColorSchema: [],
                }, permissions: {
                    allowUserToPrint: true,
                    allowUsersToViewRecords: false,
                } });
        default:
            return Object.assign(Object.assign({}, baseConfig), { chartType });
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0VXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2Rhc2hib2FyZC93aWRnZXRVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3QkFBK0U7QUFDL0UsK0JBQTRDO0FBRXJDLE1BQU0scUJBQXFCLEdBQUcsQ0FDbkMsZUFBNkIsRUFDN0IsbUJBQTZDLEVBQzdDLGNBQXNCLENBQUMsRUFDdkIsRUFBRTtJQUNGLElBQUksZUFBZSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUNqQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxtQkFBbUIsQ0FBQztJQUVqRCxxQ0FBcUM7SUFDckMsSUFBSSxJQUFJLEdBQUcsV0FBVyxFQUFFLENBQUM7UUFDdkIsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCw0REFBNEQ7SUFDNUQsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQXVCLENBQUM7SUFDNUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBRWIsMkJBQTJCO0lBQzNCLEtBQUssTUFBTSxNQUFNLElBQUksZUFBZSxFQUFFLENBQUM7UUFDckMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDdkMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuQixJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFNUIsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFD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