"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppendToLengthSuffix = void 0;
exports.appendToLength = appendToLength;
exports.truncateToLength = truncateToLength;
exports.generateUniqueCopyName = generateUniqueCopyName;
const is_1 = require("./is");
const AppendToLengthSuffixConfig = {
    _: {
        replacement: '___{index}',
        replacementRegex: /___\s?(\d*)$/,
    },
    dot: {
        replacement: '...{index}',
        replacementRegex: /\.\.\.\s?(\d*)$/,
    },
};
var AppendToLengthSuffix;
(function (AppendToLengthSuffix) {
    AppendToLengthSuffix["_"] = "_";
    AppendToLengthSuffix["dot"] = "dot";
})(AppendToLengthSuffix || (exports.AppendToLengthSuffix = AppendToLengthSuffix = {}));
async function appendToLength(param) {
    var _a, _b;
    const { value, appendage, maxLength, isExists } = param;
    const suffixConfig = AppendToLengthSuffixConfig[(_a = param.suffix) !== null && _a !== void 0 ? _a : AppendToLengthSuffix.dot];
    // if it's already in the form of truncated
    // skip with usual append
    if ((value + appendage).length > maxLength) {
        const existingIndex = (_b = value.match(suffixConfig.replacementRegex)) === null || _b === void 0 ? void 0 : _b[1];
        return truncateToLength({
            value,
            maxLength,
            currentIndex: !(0, is_1.ncIsUndefined)(existingIndex) && existingIndex !== ''
                ? Number(existingIndex)
                : undefined,
            isExists,
            suffix: param.suffix,
        });
    }
    let currentIndex = 1;
    let needle = value + appendage;
    while (await isExists(needle)) {
        needle = value + appendage + '_' + currentIndex++;
        if (needle.length >= maxLength) {
            return appendToLength(Object.assign(Object.assign({}, param), { appendage: appendage + '_' + currentIndex++, suffix: param.suffix }));
        }
    }
    return needle;
}
async function truncateToLength(param) {
    var _a;
    const { value, currentIndex, maxLength, isExists } = param;
    const suffixConfig = AppendToLengthSuffixConfig[(_a = param.suffix) !== null && _a !== void 0 ? _a : AppendToLengthSuffix.dot];
    const replacement = (0, is_1.ncIsUndefined)(currentIndex) ? '' : `${currentIndex}`;
    const suffix = suffixConfig.replacement.replace('{index}', replacement);
    const needle = value.substring(0, maxLength - suffix.length) + suffix;
    if (!(await isExists(needle))) {
        return needle;
    }
    else {
        return truncateToLength(Object.assign(Object.assign({}, param), { currentIndex: (0, is_1.ncIsUndefined)(currentIndex) ? 2 : currentIndex + 1 }));
    }
}
/**
 * Generates a unique copy name by checking against existing names/items
 */
function generateUniqueCopyName(originalName, existing, options = {}) {
    const { accessor, prefix = 'Copy of', separator = ' ', counterFormat = '({counter})', } = options;
    // Extract names from the existing array
    const existingNames = existing.map((item) => {
        if (typeof item === 'string')
            return item;
        if (accessor) {
            return typeof accessor === 'function'
                ? accessor(item)
                : String(item[accessor]);
        }
        // Default to 'title' property if no accessor specified
        return String(item.title);
    });
    let newName = `${prefix} ${originalName}`;
    let counter = 1;
    while (existingNames.includes(newName)) {
        const counterText = counterFormat.replace('{counter}', counter.toString());
        newName = `${prefix} ${originalName}${separator}${counterText}`;
        counter++;
    }
    return newName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nSGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc3RyaW5nSGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFpQkEsd0NBMENDO0FBRUQsNENBcUJDO0FBS0Qsd0RBMkNDO0FBbElELDZCQUFxQztBQUVyQyxNQUFNLDBCQUEwQixHQUFHO0lBQ2pDLENBQUMsRUFBRTtRQUNELFdBQVcsRUFBRSxZQUFZO1FBQ3pCLGdCQUFnQixFQUFFLGNBQWM7S0FDakM7SUFDRCxHQUFHLEVBQUU7UUFDSCxXQUFXLEVBQUUsWUFBWTtRQUN6QixnQkFBZ0IsRUFBRSxpQkFBaUI7S0FDcEM7Q0FDRixDQUFDO0FBQ0YsSUFBWSxvQkFHWDtBQUhELFdBQVksb0JBQW9CO0lBQzlCLCtCQUFPLENBQUE7SUFDUCxtQ0FBVyxDQUFBO0FBQ2IsQ0FBQyxFQUhXLG9CQUFvQixvQ0FBcEIsb0JBQW9CLFFBRy9CO0FBRU0sS0FBSyxVQUFVLGNBQWMsQ0FBQyxLQU1wQzs7SUFDQyxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ3hELE1BQU0sWUFBWSxHQUNoQiwwQkFBMEIsQ0FBQyxNQUFBLEtBQUssQ0FBQyxNQUFNLG1DQUFJLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXZFLDJDQUEyQztJQUMzQyx5QkFBeUI7SUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxFQUFFLENBQUM7UUFDM0MsTUFBTSxhQUFhLEdBQUcsTUFBQSxLQUFLLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQywwQ0FBRyxDQUFDLENBQUMsQ0FBQztRQUV0RSxPQUFPLGdCQUFnQixDQUFDO1lBQ3RCLEtBQUs7WUFDTCxTQUFTO1lBQ1QsWUFBWSxFQUNWLENBQUMsSUFBQSxrQkFBYSxFQUFD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