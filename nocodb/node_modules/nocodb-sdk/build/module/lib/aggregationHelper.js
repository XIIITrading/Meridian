import UITypes from './UITypes';
import { FormulaDataTypes } from '../lib/formulaHelpers';
import { getDateTimeValue, getDateValue } from '../lib/dateTimeHelper';
import { formatBytes, parseProp } from '../lib/helperFunctions';
import { convertMS2Duration } from '../lib/durationUtils';
import { getCurrencyValue, roundTo } from '../lib/numberUtils';
import { ColumnHelper } from './columnHelper';
var NumericalAggregations;
(function (NumericalAggregations) {
    NumericalAggregations["Sum"] = "sum";
    NumericalAggregations["Min"] = "min";
    NumericalAggregations["Max"] = "max";
    NumericalAggregations["Avg"] = "avg";
    NumericalAggregations["Median"] = "median";
    NumericalAggregations["StandardDeviation"] = "std_dev";
    //   Histogram = 'histogram',
    NumericalAggregations["Range"] = "range";
})(NumericalAggregations || (NumericalAggregations = {}));
var CommonAggregations;
(function (CommonAggregations) {
    CommonAggregations["Count"] = "count";
    CommonAggregations["CountEmpty"] = "count_empty";
    CommonAggregations["CountFilled"] = "count_filled";
    CommonAggregations["CountUnique"] = "count_unique";
    CommonAggregations["PercentEmpty"] = "percent_empty";
    CommonAggregations["PercentFilled"] = "percent_filled";
    CommonAggregations["PercentUnique"] = "percent_unique";
    CommonAggregations["None"] = "none";
})(CommonAggregations || (CommonAggregations = {}));
var AttachmentAggregations;
(function (AttachmentAggregations) {
    AttachmentAggregations["AttachmentSize"] = "attachment_size";
})(AttachmentAggregations || (AttachmentAggregations = {}));
var BooleanAggregations;
(function (BooleanAggregations) {
    BooleanAggregations["Checked"] = "checked";
    BooleanAggregations["Unchecked"] = "unchecked";
    BooleanAggregations["PercentChecked"] = "percent_checked";
    BooleanAggregations["PercentUnchecked"] = "percent_unchecked";
})(BooleanAggregations || (BooleanAggregations = {}));
var DateAggregations;
(function (DateAggregations) {
    DateAggregations["EarliestDate"] = "earliest_date";
    DateAggregations["LatestDate"] = "latest_date";
    DateAggregations["DateRange"] = "date_range";
    DateAggregations["MonthRange"] = "month_range";
})(DateAggregations || (DateAggregations = {}));
const AllAggregations = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, CommonAggregations), NumericalAggregations), AttachmentAggregations), BooleanAggregations), DateAggregations);
const getAvailableAggregations = (type, parsed_tree) => {
    let returnAggregations = [];
    if (type === UITypes.Formula && (parsed_tree === null || parsed_tree === void 0 ? void 0 : parsed_tree.dataType)) {
        switch (parsed_tree.dataType) {
            case FormulaDataTypes.BOOLEAN:
                returnAggregations = [
                    ...Object.values(BooleanAggregations),
                    CommonAggregations.None,
                ];
                break;
            case FormulaDataTypes.DATE:
                returnAggregations = [
                    ...Object.values(DateAggregations),
                    ...Object.values(CommonAggregations),
                ];
                break;
            case FormulaDataTypes.NUMERIC:
                returnAggregations = [
                    ...Object.values(NumericalAggregations),
                    ...Object.values(CommonAggregations),
                ];
                break;
            default:
                returnAggregations = [...Object.values(CommonAggregations)];
                break;
        }
    }
    switch (type) {
        case UITypes.Number:
        case UITypes.Decimal:
        case UITypes.Currency:
        case UITypes.Percent:
        case UITypes.Duration:
        case UITypes.Rating:
        case UITypes.Rollup:
        case UITypes.Links:
            returnAggregations = [
                ...Object.values(NumericalAggregations),
                ...Object.values(CommonAggregations),
            ];
            break;
        case UITypes.Checkbox:
            returnAggregations = [
                ...Object.values(BooleanAggregations),
                CommonAggregations.None,
            ];
            break;
        case UITypes.Date:
        case UITypes.DateTime:
        case UITypes.LastModifiedTime:
        case UITypes.CreatedTime:
            returnAggregations = [
                ...Object.values(DateAggregations),
                ...Object.values(CommonAggregations),
            ];
            break;
        case UITypes.SpecificDBType:
        case UITypes.ForeignKey:
            returnAggregations = [CommonAggregations.None];
            break;
        case UITypes.Button:
        case UITypes.Attachment:
            return [CommonAggregations.None];
    }
    if (!returnAggregations.length) {
        returnAggregations = [...Object.values(CommonAggregations)];
    }
    return returnAggregations.filter((item) => item !== CommonAggregations.Count);
};
const formatAggregation = (aggregation, value, column, 
/**
 * If columnHelperParams is provided then it will be used to format the aggregation value
 */
columnHelperParams) => {
    var _a, _b, _c;
    if ([DateAggregations.EarliestDate, DateAggregations.LatestDate].includes(aggregation)) {
        if (column.uidt === UITypes.DateTime) {
            return getDateTimeValue(value, column);
        }
        else if (column.uidt === UITypes.Date) {
            return getDateValue(value, column);
        }
        return getDateTimeValue(value, column);
    }
    if ([
        CommonAggregations.PercentEmpty,
        CommonAggregations.PercentFilled,
        CommonAggregations.PercentUnique,
        BooleanAggregations.PercentChecked,
        BooleanAggregations.PercentUnchecked,
    ].includes(aggregation)) {
        return `${(_a = roundTo(value, 1)) !== null && _a !== void 0 ? _a : 0}%`;
    }
    if ([DateAggregations.MonthRange, DateAggregations.DateRange].includes(aggregation)) {
        return aggregation === DateAggregations.DateRange
            ? `${value !== null && value !== void 0 ? value : 0} days`
            : `${value !== null && value !== void 0 ? value : 0} months`;
    }
    if ([
        CommonAggregations.Count,
        CommonAggregations.CountEmpty,
        CommonAggregations.CountFilled,
        CommonAggregations.CountUnique,
    ].includes(aggregation)) {
        return value;
    }
    if ([AttachmentAggregations.AttachmentSize].includes(aggregation)) {
        return formatBytes(value !== null && value !== void 0 ? value : 0);
    }
    if (columnHelperParams &&
        (columnHelperParams === null || columnHelperParams === void 0 ? void 0 : columnHelperParams.col) &&
        Object.values(NumericalAggregations).includes(aggregation) &&
        [
            UITypes.Number,
            UITypes.Decimal,
            UITypes.Currency,
            UITypes.Percent,
            UITypes.Duration,
            UITypes.Rollup,
        ].includes(column.uidt)) {
        return ColumnHelper.parsePlainCellValue(value, Object.assign(Object.assign({}, columnHelperParams), { isAggregation: true }));
    }
    if (column.uidt === UITypes.Currency) {
        return getCurrencyValue(value, column);
    }
    if (column.uidt === UITypes.Percent) {
        return `${roundTo(value, 1)}%`;
    }
    if (column.uidt === UITypes.Duration) {
        return convertMS2Duration(value, ((_b = parseProp(column.meta)) === null || _b === void 0 ? void 0 : _b.duration) || 0);
    }
    if (typeof value === 'number') {
        return (_c = roundTo(value, 1)) !== null && _c !== void 0 ? _c : 'âˆž';
    }
    return value;
};
export { getAvailableAggregations, NumericalAggregations, CommonAggregations, BooleanAggregations, DateAggregations, AttachmentAggregations, AllAggregations, formatAggregation, };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRpb25IZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2FnZ3JlZ2F0aW9uSGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sT0FBTyxNQUFNLFdBQVcsQ0FBQztBQUNoQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV4RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDdEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTlDLElBQUsscUJBU0o7QUFURCxXQUFLLHFCQUFxQjtJQUN4QixvQ0FBVyxDQUFBO0lBQ1gsb0NBQVcsQ0FBQTtJQUNYLG9DQUFXLENBQUE7SUFDWCxvQ0FBVyxDQUFBO0lBQ1gsMENBQWlCLENBQUE7SUFDakIsc0RBQTZCLENBQUE7SUFDN0IsNkJBQTZCO0lBQzdCLHdDQUFlLENBQUE7QUFDakIsQ0FBQyxFQVRJLHFCQUFxQixLQUFyQixxQkFBcUIsUUFTekI7QUFFRCxJQUFLLGtCQVNKO0FBVEQsV0FBSyxrQkFBa0I7SUFDckIscUNBQWUsQ0FBQTtJQUNmLGdEQUEwQixDQUFBO0lBQzFCLGtEQUE0QixDQUFBO0lBQzVCLGtEQUE0QixDQUFBO0lBQzVCLG9EQUE4QixDQUFBO0lBQzlCLHNEQUFnQyxDQUFBO0lBQ2hDLHNEQUFnQyxDQUFBO0lBQ2hDLG1DQUFhLENBQUE7QUFDZixDQUFDLEVBVEksa0JBQWtCLEtBQWxCLGtCQUFrQixRQVN0QjtBQUVELElBQUssc0JBRUo7QUFG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