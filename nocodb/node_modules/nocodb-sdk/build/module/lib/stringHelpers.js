var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ncIsUndefined } from './is';
const AppendToLengthSuffixConfig = {
    _: {
        replacement: '___{index}',
        replacementRegex: /___\s?(\d*)$/,
    },
    dot: {
        replacement: '...{index}',
        replacementRegex: /\.\.\.\s?(\d*)$/,
    },
};
export var AppendToLengthSuffix;
(function (AppendToLengthSuffix) {
    AppendToLengthSuffix["_"] = "_";
    AppendToLengthSuffix["dot"] = "dot";
})(AppendToLengthSuffix || (AppendToLengthSuffix = {}));
export function appendToLength(param) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b;
        const { value, appendage, maxLength, isExists } = param;
        const suffixConfig = AppendToLengthSuffixConfig[(_a = param.suffix) !== null && _a !== void 0 ? _a : AppendToLengthSuffix.dot];
        // if it's already in the form of truncated
        // skip with usual append
        if ((value + appendage).length > maxLength) {
            const existingIndex = (_b = value.match(suffixConfig.replacementRegex)) === null || _b === void 0 ? void 0 : _b[1];
            return truncateToLength({
                value,
                maxLength,
                currentIndex: !ncIsUndefined(existingIndex) && existingIndex !== ''
                    ? Number(existingIndex)
                    : undefined,
                isExists,
                suffix: param.suffix,
            });
        }
        let currentIndex = 1;
        let needle = value + appendage;
        while (yield isExists(needle)) {
            needle = value + appendage + '_' + currentIndex++;
            if (needle.length >= maxLength) {
                return appendToLength(Object.assign(Object.assign({}, param), { appendage: appendage + '_' + currentIndex++, suffix: param.suffix }));
            }
        }
        return needle;
    });
}
export function truncateToLength(param) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        const { value, currentIndex, maxLength, isExists } = param;
        const suffixConfig = AppendToLengthSuffixConfig[(_a = param.suffix) !== null && _a !== void 0 ? _a : AppendToLengthSuffix.dot];
        const replacement = ncIsUndefined(currentIndex) ? '' : `${currentIndex}`;
        const suffix = suffixConfig.replacement.replace('{index}', replacement);
        const needle = value.substring(0, maxLength - suffix.length) + suffix;
        if (!(yield isExists(needle))) {
            return needle;
        }
        else {
            return truncateToLength(Object.assign(Object.assign({}, param), { currentIndex: ncIsUndefined(currentIndex) ? 2 : currentIndex + 1 }));
        }
    });
}
/**
 * Generates a unique copy name by checking against existing names/items
 */
export function generateUniqueCopyName(originalName, existing, options = {}) {
    const { accessor, prefix = 'Copy of', separator = ' ', counterFormat = '({counter})', } = options;
    // Extract names from the existing array
    const existingNames = existing.map((item) => {
        if (typeof item === 'string')
            return item;
        if (accessor) {
            return typeof accessor === 'function'
                ? accessor(item)
                : String(item[accessor]);
        }
        // Default to 'title' property if no accessor specified
        return String(item.title);
    });
    let newName = `${prefix} ${originalName}`;
    let counter = 1;
    while (existingNames.includes(newName)) {
        const counterText = counterFormat.replace('{counter}', counter.toString());
        newName = `${prefix} ${originalName}${separator}${counterText}`;
        counter++;
    }
    return newName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nSGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc3RyaW5nSGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXJDLE1BQU0sMEJBQTBCLEdBQUc7SUFDakMsQ0FBQyxFQUFFO1FBQ0QsV0FBVyxFQUFFLFlBQVk7UUFDekIsZ0JBQWdCLEVBQUUsY0FBYztLQUNqQztJQUNELEdBQUcsRUFBRTtRQUNILFdBQVcsRUFBRSxZQUFZO1FBQ3pCLGdCQUFnQixFQUFFLGlCQUFpQjtLQUNwQztDQUNGLENBQUM7QUFDRixNQUFNLENBQU4sSUFBWSxvQkFHWDtBQUhELFdBQVksb0JBQW9CO0lBQzlCLCtCQUFPLENBQUE7SUFDUCxtQ0FBVyxDQUFBO0FBQ2IsQ0FBQyxFQUhXLG9CQUFvQixLQUFwQixvQkFBb0IsUUFHL0I7QUFFRCxNQUFNLFVBQWdCLGNBQWMsQ0FBQyxLQU1wQzs7O1FBQ0MsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUN4RCxNQUFNLFlBQVksR0FDaEIsMEJBQTBCLENBQUMsTUFBQSxLQUFLLENBQUMsTUFBTSxtQ0FBSSxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV2RSwyQ0FBMkM7UUFDM0MseUJBQXlCO1FBQ3pCLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUMsTUFBTSxHQUFHLFNBQVMsRUFBRSxDQUFDO1lBQzNDLE1BQU0sYUFBYSxHQUFHLE1BQUEsS0FBSyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsMENBQUcsQ0FBQyxDQUFDLENBQUM7WUFFdEUsT0FBTyxnQkFBZ0IsQ0FBQztnQkFDdEIsS0FBSztnQkFDTCxTQUFTO2dCQUNULFlBQVksRUFDVixDQUFDLGFBQWEs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