import { BadRequestV2, MetaError, NotAllowed, NotFound, OptionsNotExistsError, SsoError, TestConnectionError, UnprocessableEntity, } from '../error/nc-base.error';
import { NcErrorType } from '../globals';
import { HigherPlan } from '../payment';
import { NcErrorCodexManager } from './nc-error-codex-manager';
export class NcErrorBase {
    constructor() {
        this._errorCodex = new NcErrorCodexManager();
    }
    get errorCodex() {
        return this._errorCodex;
    }
    authenticationRequired(args) {
        throw this.errorCodex.generateError(NcErrorType.AUTHENTICATION_REQUIRED, args);
    }
    apiTokenNotAllowed(args) {
        throw this.errorCodex.generateError(NcErrorType.API_TOKEN_NOT_ALLOWED, args);
    }
    workspaceNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.WORKSPACE_NOT_FOUND, Object.assign({ params: id }, args));
    }
    columnAssociatedWithLink(_id, args) {
        throw this.errorCodex.generateError(NcErrorType.COLUMN_ASSOCIATED_WITH_LINK, args);
    }
    tableAssociatedWithLink(_id, args) {
        throw this.errorCodex.generateError(NcErrorType.TABLE_ASSOCIATED_WITH_LINK, args);
    }
    baseNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.BASE_NOT_FOUND, Object.assign({ params: id }, args));
    }
    dashboardNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.DASHBOARD_NOT_FOUND, Object.assign({ params: id }, args));
    }
    widgetNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.WIDGET_NOT_FOUND, Object.assign({ params: id }, args));
    }
    sourceNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.SOURCE_NOT_FOUND, Object.assign({ params: id }, args));
    }
    tableNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.TABLE_NOT_FOUND, Object.assign({ params: id }, args));
    }
    userNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.USER_NOT_FOUND, Object.assign({ params: id }, args));
    }
    viewNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.VIEW_NOT_FOUND, Object.assign({ params: id }, args));
    }
    hookNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.HOOK_NOT_FOUND, Object.assign({ params: id }, args));
    }
    genericNotFound(resource, id, args) {
        throw this.errorCodex.generateError(NcErrorType.GENERIC_NOT_FOUND, Object.assign({ params: [resource, id] }, args));
    }
    requiredFieldMissing(field, args) {
        throw this.errorCodex.generateError(NcErrorType.REQUIRED_FIELD_MISSING, Object.assign({ params: field }, args));
    }
    duplicateRecord(id, args) {
        throw this.errorCodex.generateError(NcErrorType.ERROR_DUPLICATE_RECORD, Object.assign({ params: id }, args));
    }
    fieldNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.FIELD_NOT_FOUND, Object.assign({ params: id }, args));
    }
    invalidOffsetValue(offset, args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_OFFSET_VALUE, Object.assign({ params: `${offset}` }, args));
    }
    invalidPageValue(page, args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_PAGE_VALUE, Object.assign({ params: `${page}` }, args));
    }
    invalidPrimaryKey(value, pkColumn, args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_PK_VALUE, Object.assign({ params: [value, pkColumn] }, args));
    }
    invalidLimitValue(args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_LIMIT_VALUE, Object.assign({}, args));
    }
    invalidFilter(filter, args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_FILTER, Object.assign({ params: filter }, args));
    }
    invalidValueForField(payload, args) {
        const withReason = typeof payload === 'object' && payload.reason
            ? `, reason: ${payload.reason}`
            : ``;
        throw this.errorCodex.generateError(NcErrorType.INVALID_VALUE_FOR_FIELD, Object.assign({ params: typeof payload === 'string'
                ? payload
                : `Invalid value '${payload.value}' for type '${payload.type}' on column '${payload.column}'${withReason}` }, args));
    }
    valueLengthExceedLimit(payload, args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_VALUE_FOR_FIELD, Object.assign({ params: `Value length '${payload.length}' is exceeding allowed limit '${payload.maxLength}' for type '${payload.type}' on column '${payload.column}'` }, args));
    }
    invalidSharedViewPassword(args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_SHARED_VIEW_PASSWORD, Object.assign({}, args));
    }
    invalidSharedDashboardPassword(args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_SHARED_DASHBOARD_PASSWORD, Object.assign({}, args));
    }
    invalidAttachmentJson(payload, args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_ATTACHMENT_JSON, Object.assign({ params: payload }, args));
    }
    notImplemented(feature = 'Feature', args) {
        throw this.errorCodex.generateError(NcErrorType.NOT_IMPLEMENTED, Object.assign({ params: feature }, args));
    }
    internalServerError(message, args) {
        throw this.errorCodex.generateError(NcErrorType.INTERNAL_SERVER_ERROR, Object.assign({ params: message }, args));
    }
    formulaError(message, args) {
        throw this.errorCodex.generateError(NcErrorType.FORMULA_ERROR, Object.assign({ params: message }, args));
    }
    formulaCircularRefError(message, args) {
        throw this.errorCodex.generateError(NcErrorType.FORMULA_CIRCULAR_REF_ERROR, Object.assign({ params: message }, args));
    }
    unauthorized(message, args) {
        throw this.errorCodex.generateError(NcErrorType.AUTHENTICATION_REQUIRED, Object.assign({ params: message }, args));
    }
    forbidden(message, args) {
        throw this.errorCodex.generateError(NcErrorType.FORBIDDEN, Object.assign({ params: message }, args));
    }
    sourceDataReadOnly(name) {
        this.forbidden(`Source '${name}' is read-only`);
    }
    sourceMetaReadOnly(name) {
        this.forbidden(`Source '${name}' schema is read-only`);
    }
    integrationNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.INTEGRATION_NOT_FOUND, Object.assign({ params: id }, (args || {})));
    }
    cannotCalculateIntermediateOrderError() {
        throw this.errorCodex.generateError(NcErrorType.CANNOT_CALCULATE_INTERMEDIATE_ORDER, {});
    }
    reorderFailed() {
        throw this.errorCodex.generateError(NcErrorType.REORDER_FAILED, {});
    }
    integrationLinkedWithMultiple(bases, sources, args) {
        throw this.errorCodex.generateError(NcErrorType.INTEGRATION_LINKED_WITH_BASES, Object.assign({ params: bases.map((s) => s.title).join(', '), details: {
                bases: bases.map((b) => {
                    return {
                        id: b.id,
                        title: b.title,
                    };
                }),
                sources: sources.map((s) => {
                    return {
                        id: s.id,
                        base_id: s.base_id,
                        title: s.alias,
                    };
                }),
            } }, (args || {})));
    }
    invalidAttachmentUploadScope(args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_ATTACHMENT_UPLOAD_SCOPE, args);
    }
    planLimitExceeded(message, details, args) {
        throw this.errorCodex.generateError(NcErrorType.PLAN_LIMIT_EXCEEDED, Object.assign(Object.assign({ params: message }, args), { details: Object.assign(Object.assign({}, details), ((details === null || details === void 0 ? void 0 : details.plan) ? { higherPlan: HigherPlan[details.plan] } : {})) }));
    }
    allowedOnlySSOAccess(ncWorkspaceId) {
        throw this.errorCodex.generateError(NcErrorType.SSO_LOGIN_REQUIRED, {
            params: ncWorkspaceId,
        });
    }
    allowedOnlySSOGeneratedToken(ncWorkspaceId) {
        throw this.errorCodex.generateError(NcErrorType.SSO_GENERATED_TOKEN_REQUIRED, {
            params: ncWorkspaceId,
        });
    }
    maxInsertLimitExceeded(limit, args) {
        throw this.errorCodex.generateError(NcErrorType.MAX_INSERT_LIMIT_EXCEEDED, Object.assign({ params: limit.toString() }, args));
    }
    baseUserError(message, args) {
        throw this.errorCodex.generateError(NcErrorType.BASE_USER_ERROR, Object.assign({ params: message }, args));
    }
    maxWorkspaceLimitReached(args) {
        throw this.errorCodex.generateError(NcErrorType.MAX_WORKSPACE_LIMIT_REACHED, Object.assign({}, args));
    }
    prohibitedSyncTableOperation(param, args) {
        let message = '';
        switch (param.operation) {
            case 'insert':
            case 'update':
            case 'delete':
                message = `Prohibited data insert / update / delete operation on synced table ${param.modelName}`;
                break;
            case 'create_form_view':
                message = `Form view creation is not supported for synced table ${param.modelName}`;
                break;
        }
        throw this.errorCodex.generateError(NcErrorType.PROHIBITED_SYNC_TABLE_OPERATION, Object.assign({ params: message }, args));
    }
    invalidRequestBody(message) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_REQUEST_BODY, {
            params: message,
        });
    }
    unprocessableEntity(message = 'Unprocessable entity') {
        throw new UnprocessableEntity(message);
    }
    testConnectionError(message = 'Unprocessable entity', code) {
        throw new TestConnectionError(message, code);
    }
    notAllowed(message = 'Not allowed') {
        throw new NotAllowed(message);
    }
    emailDomainNotAllowed(domain) {
        throw new SsoError(`Email domain ${domain} is not allowed for this organization`);
    }
    metaError(param) {
        throw new MetaError(param);
    }
    notFound(message = 'Not found') {
        throw new NotFound(message);
    }
    badRequest(message) {
        throw new BadRequestV2(message);
    }
    optionsNotExists(props) {
        throw new OptionsNotExistsError(props);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmMtZXJyb3ItYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvZXJyb3ItaGFuZGxlci9uYy1lcnJvci1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxZQUFZLEVBQ1osU0FBUyxFQUVULFVBQVUsRUFDVixRQUFRLEVBQ1IscUJBQXFCLEVBQ3JCLFFBQVEsRUFDUixtQkFBbUIsRUFDbkIsbUJBQW1CLEdBQ3BCLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUFFLFdBQVcsRUFBZ0MsTUFBTSxZQUFZLENBQUM7QUFDdkUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUV4QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUvRCxNQUFNLE9BQU8sV0FBVztJQUN0QjtRQUNFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxtQkFBbUIsRUFBRSxDQUFDO0lBQy9DLENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUVELHNCQUFzQixDQUFDLElBQWtCO1FBQ3ZDLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQ2pDLFdBQVcsQ0FBQyx1QkFBdUIsRUFDbkMsSUFBSSxDQUNMLENBQUM7SUFDSixDQUFDO0lBRUQsa0JBQWtCLENBQUMsSUFBa0I7UUFDbkMsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FDakMsV0FBVyxDQUFDLHFCQUFxQixFQUNqQyxJQUFJLENBQ0wsQ0FBQztJQUNKLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxFQUFVLEVBQUUsSUFBa0I7UUFDOUMsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsbUJBQW1CLGtCQUNqRSxNQUFNLEVBQUUsRUFBRSxJQUNQLElBQUksRUFDUCxDQUFDO0lBQ0wsQ0FB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